{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { ReplaySubject, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AccountService = /*#__PURE__*/(() => {\n  class AccountService {\n    constructor(http) {\n      this.http = http;\n      this.currentUserSource = new ReplaySubject(1);\n      this.currentUser$ = this.currentUserSource.asObservable();\n      this.user = JSON.parse(localStorage.getItem('user'));\n      this.baseUrl = 'https://localhost:5001/';\n      this.apiurl = `http://localhost:8089/api/user/`;\n    } // tslint:disable-next-line:typedef\n\n\n    login(model) {\n      return this.http.post(this.apiurl + 'auth/login', model).pipe(map(response => {\n        const user = response;\n\n        if (user) {\n          localStorage.setItem('user', JSON.stringify(user));\n          this.currentUserSource.next(user);\n        }\n      }));\n    }\n\n    getProfile() {\n      let user = JSON.parse(localStorage.getItem('user'));\n      let id = user.passportId;\n      const header = new HttpHeaders().set('Authorization', 'Bearer ' + this.user.token);\n      let api = `http://localhost:8089/api/user/account/${id}`;\n      return this.http.get(api, {\n        headers: header\n      }).pipe(map(res => {\n        return this.profile = res;\n      }), catchError(this.handleError));\n    } //getAddress-by-id(for all)\n\n\n    getAddressbyId() {\n      const id = this.user.passportId;\n      var baseAPI = this.apiurl + 'address/find/';\n      return this.http.get(baseAPI + `${id}`).pipe(map(response => {\n        return response;\n      }), catchError(this.handleError));\n    }\n\n    getShippingAddress() {\n      const orderDetails = JSON.parse(localStorage.getItem('order'));\n      const id = orderDetails.addressId;\n      var baseAPI = this.apiurl + 'address/findone/';\n      return this.http.get(baseAPI + `${id}`).pipe(map(response => {\n        return response;\n      }), catchError(this.handleError));\n    }\n\n    createUserAddress(model) {\n      const id = this.user.passportId;\n      const header = new HttpHeaders().set('content-type', 'application/json');\n      return this.http.post(this.apiurl + 'address/create/' + `${id}`, model, {\n        headers: header\n      }).pipe(map(response => {\n        return response;\n      }), catchError(this.handleError));\n    }\n\n    deactivateAccount(id) {\n      // let user = JSON.parse(localStorage.getItem('user'));\n      // const header = new HttpHeaders().set('Authorization',`Bearer ${user.token}`); \n      this.http.put(`https://localhost:5001/api/account/deactivate/${id}`, {}).subscribe(res => {\n        return res;\n      });\n    }\n\n    updateAccount(id, model) {\n      this.http.put(`https://localhost:5001/api/account/update/${id}`, model).subscribe(res => {\n        this.model = res;\n        return res;\n      }); // const header = new HttpHeaders().set('Authorization','Bearer ' + this.user.token); \n      // let api = `https://localhost:5001/api/account/update`;\n      // return this.http.put(`https://localhost:5001/api/account/update`, model).pipe(\n      //   map((res: Response) => {\n      //     return this.profile = res;\n      //   }),\n      //   catchError(this.handleError)\n      // )\n\n      return this.model;\n    } // Error \n\n\n    handleError(error) {\n      let msg = '';\n\n      if (error.error instanceof ErrorEvent) {\n        // client-side error\n        msg = error.error.message;\n      } else {\n        // server-side error\n        msg = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n      }\n\n      return throwError(msg);\n    } // tslint:disable-next-line:typedef\n\n\n    register(model) {\n      // console.log(model);\n      return this.http.post(this.apiurl + 'account/register', model).pipe(map(response => {\n        return response;\n      }));\n    } // tslint:disable-next-line:typedef\n\n\n    setCurrentUser(user) {\n      this.currentUserSource.next(user);\n    } // tslint:disable-next-line:typedef\n\n\n    logout() {\n      localStorage.removeItem('user');\n      localStorage.removeItem('order');\n      this.currentUserSource.next(null);\n    }\n\n  }\n\n  AccountService.ɵfac = function AccountService_Factory(t) {\n    return new (t || AccountService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  AccountService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AccountService,\n    factory: AccountService.ɵfac,\n    providedIn: 'root'\n  });\n  return AccountService;\n})();","map":null,"metadata":{},"sourceType":"module"}